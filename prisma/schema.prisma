datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = ".prisma/client"
  output       = "../src/lib/prisma/types/objects.d.ts"
}

generator pothosCrud {
  // Suggested codegen
  provider            = "prisma-generator-pothos-codegen"
  generatorConfigPath = "../src/lib/graphql/schema/config.js"
}

model User {
  id                String       @id @default(cuid())
  name              String?
  email             String       @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  phone             String?
  firstName         String?
  lastName          String?
  // initials String
  preferredLanguage String?      @default("en")
  timeformat24      Boolean      @default(false)
  timezone          String       @default("UTC")
  weekStartDate     String       @default("monday")
  photo             Attachment?  @relation("profilePhoto", fields: [photoId], references: [id])
  photoId           Int?         @unique
  featureDiscovery  String[]
  emailProviders    String[] // Test actual Integrations
  theme             String?
  notifications     Json?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  accounts          Account[]
  sessions          Session[]
  hiringRoles       HiringRole[]
  companiesOwned    Company[]    @relation("owner")
  userRole          UserRoles    @default(DEFAULT)
}

enum UserRoles {
  SUPERADMIN
  DEFAULT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attachment {
  id                   Int              @id @default(autoincrement())
  contentType          String
  filename             String
  path                 String
  size                 Int?
  userProfilePhoto     User?            @relation("profilePhoto")
  candidateCv          Candidate?       @relation("cv")
  candidateAvatar      Candidate?       @relation("avatar")
  candidateCoverLetter Candidate?       @relation("coverLetter")
  companyLogo          Company?         @relation("logo")
  uploader             HiringRole?      @relation(fields: [uploaderId], references: [id])
  uploaderId           Int?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  offerFiles           OfferFile[]
  talentPoolFiles      TalentPoolFile[]
  company              Company          @relation("attachments", fields: [companyId], references: [id])
  companyId            String
}

model HiringRole {
  id                       Int                        @id @default(autoincrement())
  user                     User                       @relation(fields: [userId], references: [id])
  userId                   String
  role                     Role                       @relation(fields: [roleId], references: [id])
  roleId                   Int
  company                  Company                    @relation(fields: [companyId], references: [id])
  companyId                String
  attachments              Attachment[]
  extraAbilities           String[]
  auditLogs                AuditLog[]
  eventScheduleInterviewer EventScheduleInterviewer[]
  eventInterviewer         EventInterviewer[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  offerRecruiter           Offer?                     @relation("recruiter")
  offerHiringManager       Offer?                     @relation("hiringManager")
  memberships              Membership[]
  stageVisibility          StageVisibility[]
  hiredCandidates          Candidate[]
  evaluations              Evaluation[]
  tasks                    TaskMember[]
  follows                  Follow[]

  // Ensure that the user only have one hiringRole in a Company
  @@unique([userId, companyId])
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String
  abilities       String[]
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String
  hiringRoles     HiringRole[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  memberships     Membership[]
  stageVisibility StageVisibility[]
}

model Company {
  id                    String             @id @default(cuid())
  name                  String
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  country               String?
  companyInbox          String?
  subdomain             String?
  gdprEnable            Boolean? // **
  gdprRetention         Int? // Maybe metadata
  gdprPrivacyPolicyLink String? // *
  gdprEmailFooter       String? // **
  roles                 Role[]
  subscription          SubscriptionData?
  meetingRooms          MeetingRoom[]
  metadata              CompanyMetadata[]
  eventSchedule         EventSchedule[]
  events                Event[]
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  departments           Department[]
  disqualifyReasons     DisqualifyReason[]
  tagSources            TagSource[]
  auditLogs             AuditLog[]
  offers                Offer[]
  templates             Template[]
  tasks                 Task[]
  owner                 User               @relation("owner", fields: [ownerId], references: [id])
  ownerId               String
  hiringRoles           HiringRole[]
  candidates            Candidate[]
  TalentPool            TalentPool[]
  CustomFields          CustomField[]
  logo                  Attachment?        @relation("logo", fields: [logoId], references: [id])
  logoId                Int?               @unique
  attachments           Attachment[]       @relation("attachments")
}

model SubscriptionData {
  id                 Int      @id @default(autoincrement())
  active             Boolean
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  status             String
  company            Company  @relation(fields: [companyId], references: [id])
  companyId          String   @unique
}

model CompanyMetadata {
  id        Int     @id @default(autoincrement())
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  key       String
  value     String
  settings  Json?
  type      String  @default("string")

  @@unique([companyId, key])
}

model Department {
  id        Int     @id @default(autoincrement())
  name      String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  offers    Offer[]
}

model DisqualifyReason {
  id        Int     @id @default(autoincrement())
  name      String
  action    Json
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  matches   Match[]
}

enum TagSourceType {
  TAG_OFFER
  TAG_CANDIDATE
  SOURCE
}

model TagSource {
  id                Int            @id @default(autoincrement())
  name              String
  type              TagSourceType
  company           Company        @relation(fields: [companyId], references: [id])
  companyId         String
  offerTags         OfferTag[]
  candidateReferrer Candidate[]    @relation("referrer")
  candidateTags     CandidateTag[]

  @@unique([companyId, type, name])
}

model AuditLog {
  id           Int         @id @default(autoincrement())
  company      Company     @relation(fields: [companyId], references: [id])
  companyId    String
  user         HiringRole? @relation(fields: [userId], references: [id])
  userId       Int?
  offer        Offer?      @relation(fields: [offerId], references: [id])
  offerId      Int?
  candidate    Candidate?  @relation(fields: [candidateId], references: [id])
  candidateId  Int?
  actor        String
  actorType    String
  ip           String
  action       String
  eventDetails Json
  createdAt    DateTime    @default(now())
}

model MeetingRoom {
  // Not sure how this works, needs testing with actual email
  id        Int     @id @default(autoincrement())
  name      String
  type      String
  link      String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model EventSchedule {
  id                        Int                        @id @default(autoincrement())
  name                      String
  dateRange                 Int
  expiresAfter              Int
  inviteAll                 Boolean
  bufferTime                Int
  ignoreDayEvents           Boolean
  meetingLimit              Int
  duration                  Int
  Interval                  Int
  type                      String
  timezone                  String
  location                  String
  note                      String
  privateNote               String
  link                      String
  company                   Company                    @relation(fields: [companyId], references: [id])
  companyId                 String
  eventScheduleInterviewers EventScheduleInterviewer[]
  eventScheduleEvaluations  EventScheduleEvaluation[]
}

model EventScheduleInterviewer {
  id              Int           @id @default(autoincrement())
  eventSchedule   EventSchedule @relation(fields: [eventScheduleId], references: [id])
  eventScheduleId Int
  teamMember      HiringRole    @relation(fields: [teamMemberId], references: [id])
  teamMemberId    Int
  availability    Json
}

model EventScheduleEvaluation {
  id              Int           @id @default(autoincrement())
  eventSchedule   EventSchedule @relation(fields: [eventScheduleId], references: [id])
  eventScheduleId Int
  evaluation      Evaluation    @relation(fields: [evaluationId], references: [id])
  evaluationId    Int
}

model Event {
  id                Int                @id @default(autoincrement())
  date              DateTime
  time              Int
  duration          Int
  type              String
  location          String
  note              String
  privateNote       String
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         String
  eventInterviewers EventInterviewer[]
  evaluations       Evaluation[]
}

// Could be implicit relation
model EventInterviewer {
  id           Int        @id @default(autoincrement())
  event        Event      @relation(fields: [eventId], references: [id])
  eventId      Int
  teamMember   HiringRole @relation(fields: [teamMemberId], references: [id])
  teamMemberId Int
}

model Offer {
  id                           Int                @id @default(autoincrement())
  name                         String
  company                      Company            @relation(fields: [companyId], references: [id])
  companyId                    String
  department                   Department?        @relation(fields: [departmentId], references: [id])
  departmentId                 Int?
  recruiter                    HiringRole?        @relation("recruiter", fields: [recruiterId], references: [id])
  recruiterId                  Int?               @unique
  hiringManager                HiringRole?        @relation("hiringManager", fields: [hiringManagerId], references: [id])
  hiringManagerId              Int?               @unique
  description                  String?
  requirements                 String?
  locationCountry              String?
  locationState                String?
  locationCity                 String?
  locationStreet               String?
  zipcode                      String?
  remote                       Boolean            @default(false)
  jobType                      String?
  jobCategory                  String?
  jobReqEducation              String?
  jobReqExperience             String?
  jobHoursMin                  Int?
  jobHoursMax                  Int?
  jobSalaryMin                 Int?
  jobSalaryMax                 Int?
  jobSalaryPeriod              String?
  jobSalaryCurrency            String?
  personalInfoCv               OfferPersonalItems @default(NONE)
  personalInfoCoverLetter      OfferPersonalItems @default(NONE)
  personalInfoPhoto            OfferPersonalItems @default(NONE)
  personalInfoPhone            OfferPersonalItems @default(NONE)
  screeningQuestionsTemplate   Template?          @relation("screeningQuestionsTemplate", fields: [screeningQuestionsTemplateId], references: [id])
  screeningQuestionsTemplateId Int?
  pipelineTemplate             Template?          @relation("pipelineTemplate", fields: [pipelineTemplateId], references: [id])
  pipelineTemplateId           Int?
  autoConfirmationEmail        Template?          @relation("autoConfirmationEmail", fields: [autoConfirmationEmailId], references: [id])
  autoConfirmationEmailId      Int?
  isPublished                  Boolean            @default(false)
  auditLogs                    AuditLog[]
  files                        OfferFile[]
  offerTags                    OfferTag[]
  memberships                  Membership[]
  matches                      Match[]
  hired                        Candidate[]
  evaluations                  Evaluation[]
  follows                      Follow[]
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
}

enum OfferPersonalItems {
  REQUIRED
  OPTIONAL
  NONE
}

model OfferFile {
  id           Int        @id @default(autoincrement())
  offer        Offer      @relation(fields: [offerId], references: [id])
  offerId      Int
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId Int
}

model Match {
  id                 Int               @id @default(autoincrement())
  offer              Offer             @relation(fields: [offerId], references: [id])
  offerId            Int
  candidate          Candidate         @relation(fields: [candidateId], references: [id])
  candidateId        Int
  stage              Stage?            @relation(fields: [stageId], references: [id]) // Status
  stageId            Int?
  isHired            Boolean           @default(false)
  disqualifyReason   DisqualifyReason? @relation(fields: [disqualifyReasonId], references: [id])
  disqualifyReasonId Int?

  @@unique([candidateId, offerId])
}

// Implicit
model OfferTag {
  offer   Offer     @relation(fields: [offerId], references: [id])
  offerId Int
  tag     TagSource @relation(fields: [tagId], references: [id])
  tagId   Int

  @@id([offerId, tagId])
}

enum MembershipTypes {
  MEMBER
  ROLE
}

model Membership {
  id           Int             @id @default(autoincrement())
  type         MembershipTypes // This creates a dependency, only one should be set, role or hiringRole
  teamMember   HiringRole?     @relation(fields: [teamMemberId], references: [id])
  teamMemberId Int?
  role         Role?           @relation(fields: [roleId], references: [id])
  roleId       Int?
  offer        Offer           @relation(fields: [offerId], references: [id])
  offerId      Int
}

model TalentPool {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  files       TalentPoolFile[]
  matches     TalentPoolMatch[]
  follows     Follow[]
  company     Company           @relation(fields: [companyId], references: [id])
  companyId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model TalentPoolFile {
  id           Int        @id @default(autoincrement())
  talentPool   TalentPool @relation(fields: [talentPoolId], references: [id])
  talentPoolId Int
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId Int
}

model TalentPoolMatch {
  id           Int        @id @default(autoincrement())
  talentPool   TalentPool @relation(fields: [talentPoolId], references: [id])
  talentPoolId Int
  candidate    Candidate  @relation(fields: [candidateId], references: [id])
  candidateId  Int
}

enum TemplateTypes {
  SCREENING_QUESTIONS
  PIPELINE
  AUTOCONFIRMATION_EMAIL
  EVALUATION
}

model Template {
  id                         Int           @id @default(autoincrement())
  company                    Company       @relation(fields: [companyId], references: [id])
  companyId                  String
  isCompanyWide              Boolean?      @default(true)
  type                       TemplateTypes
  name                       String
  category                   String?
  screeningQuestionsTemplate Offer[]       @relation("screeningQuestionsTemplate")
  pipelineTemplate           Offer[]       @relation("pipelineTemplate")
  autoConfirmationEmail      Offer[]       @relation("autoConfirmationEmail")
  stages                     Stage[]
  evaluations                Evaluation[]
}

// TODO: Fix optional values
model Stage {
  id          Int               @id @default(autoincrement())
  position    Int?
  category    String
  inputType   String?
  value       String?
  template    Template          @relation(fields: [templateId], references: [id])
  templateId  Int
  isProtected Boolean?          @default(false)
  matches     Match[]
  visibility  StageVisibility[]
  metadata    StageMetadata[]
}

// Check if is worth merging to MEMBERSHIP
model StageVisibility {
  id           Int             @id @default(autoincrement())
  type         MembershipTypes
  teamMember   HiringRole?     @relation(fields: [teamMemberId], references: [id])
  teamMemberId Int?
  role         Role?           @relation(fields: [roleId], references: [id])
  roleId       Int?
  stage        Stage           @relation(fields: [stageId], references: [id]) // Status
  stageId      Int
}

model StageMetadata {
  id        Int    @id @default(autoincrement())
  metaKey   String
  metaValue String
  stage     Stage  @relation(fields: [stageId], references: [id]) // Status
  stageId   Int
}

model Candidate {
  id                    Int                    @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String
  phone                 String?
  skills                String[]
  mainLanguage          String                 @default("en")
  languages             String[]
  coverLetterText       String?
  birthday              DateTime?
  referrer              TagSource?             @relation("referrer", fields: [referrerId], references: [id])
  referrerId            Int?
  cv                    Attachment?            @relation("cv", fields: [cvId], references: [id])
  cvId                  Int?                   @unique
  avatar                Attachment?            @relation("avatar", fields: [avatarId], references: [id])
  avatarId              Int?                   @unique
  coverLetter           Attachment?            @relation("coverLetter", fields: [coverLetterId], references: [id])
  coverLetterId         Int?                   @unique
  educationLevel        String? // Should enum
  socials               String[]
  links                 String[]
  salaryExpectation     Int?
  hiredAt               Offer?                 @relation(fields: [hiredAtId], references: [id])
  hiredAtId             Int?
  hiredBy               HiringRole?            @relation(fields: [hiredById], references: [id])
  hiredById             Int?
  auditLogs             AuditLog[]
  offers                Match[]
  talentPools           TalentPoolMatch[]
  candidateTags         CandidateTag[]
  candidateCustomFields CandidateCustomField[]
  evaluations           Evaluation[]
  tasks                 Task[]
  follows               Follow[]
  SharedCandidateLink   SharedCandidateLink[]
  company               Company                @relation(fields: [companyId], references: [id])
  companyId             String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@unique([email, companyId])
}

model CandidateTag {
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  tag         TagSource @relation(fields: [tagId], references: [id])
  tagId       Int

  @@id([candidateId, tagId])
}

model CandidateCustomField {
  candidate     Candidate   @relation(fields: [candidateId], references: [id])
  candidateId   Int
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  customFieldId Int
  value         String?

  @@id([candidateId, customFieldId])
}

model CustomField {
  id                    Int                    @id @default(autoincrement())
  type                  String                 @default("string")
  key                   String
  defaultValue          String?
  settings              Json?
  company               Company                @relation(fields: [companyId], references: [id])
  companyId             String
  candidateCustomFields CandidateCustomField[]

  @@unique([companyId, key])
}

enum SCORE_TYPES {
  APPROVED
  NEUTRAL
  REJECTED
}

model Evaluation {
  id                       Int                       @id @default(autoincrement())
  template                 Template?                 @relation(fields: [templateId], references: [id])
  templateId               Int?
  offer                    Offer?                    @relation(fields: [offerId], references: [id])
  offerId                  Int?
  candidate                Candidate                 @relation(fields: [candidateId], references: [id])
  candidateId              Int
  teamMember               HiringRole                @relation(fields: [teamMemberId], references: [id])
  teamMemberId             Int
  isQuickEval              Boolean                   @default(false)
  description              String?
  score                    SCORE_TYPES
  eventScheduleEvaluations EventScheduleEvaluation[]
  event                    Event?                    @relation(fields: [eventId], references: [id])
  eventId                  Int?
  answers                  EvaluationQuestion[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model EvaluationQuestion {
  id           Int        @id @default(autoincrement())
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId Int
  inputType    String
  settings     Json?
  question     String?
  answer       String
}

model SharedCandidateLink {
  id                Int       @id @default(autoincrement())
  name              String
  visibleSections   String[] // Should be break down to attributes?
  editModelSections String[] // same visibleSections issue
  link              String
  expiration        DateTime
  candidate         Candidate @relation(fields: [candidateId], references: [id])
  candidateId       Int
}

model Task {
  id          Int          @id @default(autoincrement())
  company     Company      @relation(fields: [companyId], references: [id])
  companyId   String
  name        String
  status      String
  dueDate     DateTime
  note        String
  taskMembers TaskMember[]
  Candidate   Candidate?   @relation(fields: [candidateId], references: [id])
  candidateId Int?
}

model TaskMember {
  id           Int        @id @default(autoincrement())
  task         Task       @relation(fields: [taskId], references: [id])
  taskId       Int
  teamMember   HiringRole @relation(fields: [teamMemberId], references: [id])
  teamMemberId Int
}

model Follow {
  id           Int         @id @default(autoincrement())
  offer        Offer?      @relation(fields: [offerId], references: [id])
  offerId      Int?
  candidate    Candidate?  @relation(fields: [candidateId], references: [id])
  candidateId  Int?
  talentPool   TalentPool? @relation(fields: [talentPoolId], references: [id])
  talentPoolId Int?
  teamMember   HiringRole  @relation(fields: [teamMemberId], references: [id])
  teamMemberId Int
}
